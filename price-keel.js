// Generated by CoffeeScript 2.7.0
(function() {
  var BLUE, BOLD, DARK_GREY, FONTHEIGHT, FONTWIDTH, FONT_FAMILY, GREEN, GREY, Graph, LIGHT_GREY, RED, REGULAR, abs, ceil, drawScreen, fit, fitClamp, floor, graph, log, log10, max, min, mouseDownAct, mouseUpAct, redrawScreen, resizeAct, round, timer, wheelAct;

  ({round, floor, log, log10, min, max, abs, ceil} = Math);

  // Constants
  FONTHEIGHT = 14;

  FONTWIDTH = FONTHEIGHT * .75;

  FONT_FAMILY = 'Roboto Mono';

  REGULAR = FONTHEIGHT + 'px ' + FONT_FAMILY;

  BOLD = 'BOLD ' + FONTHEIGHT + 'px ' + FONT_FAMILY;

  GREEN = '#20b020';

  RED = '#b02020';

  BLUE = '#2020b0';

  DARK_GREY = '#404040';

  GREY = '#909090';

  LIGHT_GREY = '#a0a0a0';

  timer = performance.now();

  graph = {};

  // fit fits a value between 0 and 1 proportionally to its distance to minimum and maximum
  fit = function(val, minimum, maximum) {
    return (val - minimum) / (maximum - minimum);
  };

  fitClamp = function(val, minimum, maximum) {
    return max(0, min(1, (val - minimum) / (maximum - minimum)));
  };

  Graph = class Graph {
    constructor(containerName) {
      var changeSettings, mouseMoveAct, req;
      req = new XMLHttpRequest();
      req.open('GET', 'https://gadfly16.github.io/sagacity/frames.json');
      req.responseType = 'json';
      this.container = document.getElementById(containerName);
      this.start_elm = this.container.querySelector('#settings>#start');
      this.duration_elm = this.container.querySelector('#settings>#duration');
      this.top_elm = this.container.querySelector('#settings>#top');
      this.bottom_elm = this.container.querySelector('#settings>#bottom');
      this.initial_elm = this.container.querySelector('#settings>#initial');
      this.threshold_elm = this.container.querySelector('#settings>#threshold');
      this.canvas = this.container.querySelector('.canvas');
      this.focus = 0;
      this.padLeft = 30;
      this.padRight = 30;
      this.padTop = 20;
      this.padBottom = 40;
      this.setCanvasSize();
      graph = this;
      changeSettings = function() {
        var ada, cumfee, eur, fee, i, lastPrice, lbottom, lprice, ltop, price, ratio, sumval, tradefee, tradeval;
        graph.start = (floor((new Date(graph.start_elm.value)).getTime() / 1000) - graph.frames[0].ft) / 86400;
        graph.duration = parseInt(graph.duration_elm.value);
        graph.top = parseFloat(graph.top_elm.value);
        graph.bottom = parseFloat(graph.bottom_elm.value);
        graph.initial = parseFloat(graph.initial_elm.value);
        graph.threshold = parseFloat(graph.threshold_elm.value);
        console.log(graph.start, graph.duration, graph.top, graph.bottom, graph.initial);
        // Simulate trading
        fee = 0.0016;
        i = graph.start;
        eur = graph.initial;
        ada = 0;
        ltop = log(graph.top);
        lbottom = log(graph.bottom);
        cumfee = 0;
        lastPrice = 0;
        while (i < graph.start + graph.duration) {
          price = graph.frames[i].wa;
          if (lastPrice === 0 || max(price, lastPrice) / min(price, lastPrice) > 1 + graph.threshold) {
            lprice = log(price);
            ratio = fitClamp(lprice, lbottom, ltop);
            sumval = price * ada + eur;
            tradeval = eur - ratio * sumval;
            tradefee = abs(tradeval) * fee;
            cumfee += tradefee;
            ada += tradeval / price;
            eur -= tradeval + tradefee;
            graph.frames[i].tv = tradeval;
            lastPrice = price;
          } else {
            graph.frames[i].tv = 0;
          }
          graph.frames[i].adaval = ada * price;
          graph.frames[i].eur = eur;
          console.log(price, ratio, tradeval, ada, eur, (new Date(graph.frames[i].ft * 1000)).toDateString(), sumval, cumfee);
          i++;
        }
        return redrawScreen();
      };
      mouseMoveAct = function(e) {
        var x, y;
        x = e.offsetX;
        y = e.offsetY;
        if (x > graph.padLeft && x < graph.padLeft + graph.width && y > graph.padTop && y < graph.padTop + graph.height) {
          graph.focus = floor((x - graph.padLeft) / (graph.width / graph.duration));
        }
        return redrawScreen();
      };
      req.onload = function() {
        graph.container.querySelectorAll('input').forEach(function(item) {
          return item.addEventListener('change', changeSettings);
        });
        // window.onmousedown = mouseDownAct
        // window.onmouseup = mouseUpAct
        graph.canvas.onmousemove = mouseMoveAct;
        window.onresize = resizeAct;
        // window.onwheel = wheelAct
        graph.frames = req.response;
        changeSettings();
        return console.log(graph.frames);
      };
      req.send();
    }

    drawHorizLine(ctx, y, color) {
      ctx.strokeStyle = color;
      ctx.beginPath();
      ctx.moveTo(this.padLeft, y);
      ctx.lineTo(this.canvas.width - this.padRight, y);
      return ctx.stroke();
    }

    setCanvasSize() {
      var width;
      width = this.container.getBoundingClientRect().width;
      this.canvas.width = width;
      this.canvas.height = width / 2;
      this.width = this.canvas.width - this.padLeft - this.padRight;
      return this.height = this.canvas.height - this.padTop - this.padBottom;
    }

    draw() {
      var barHeight, barWidth, ctx, endAda, endPrice, endResultAda, endResultEur, endValue, f, fdt, fframe, fh, first, fresult, fresultWidth, ftrade, ftradeWidth, ftv, fx, fy, gap, i, last, maximum, minimum, offset, prec, range, s, scale, startAda, startPrice, summary, t, x, y;
      ctx = this.canvas.getContext('2d');
      ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
      ctx.save();
      // Find minimum and maximum of displayed frames
      maximum = this.frames[this.start].mx;
      minimum = this.frames[this.start].mn;
      i = this.start + 1;
      while (i <= this.start + this.duration) {
        maximum = max(maximum, this.frames[i].mx);
        minimum = min(minimum, this.frames[i].mn);
        i++;
      }
      maximum = max(maximum, this.top);
      minimum = min(minimum, this.bottom);
      f = this.start + this.focus;
      // Draw scale lines
      range = maximum - minimum;
      scale = 10 ** (floor(log10(range)) - 1);
      first = ceil(minimum / scale) * scale;
      last = floor(maximum / scale) * scale;
      ctx.lineWidth = 0.5;
      ctx.fillStyle = LIGHT_GREY;
      ctx.font = REGULAR;
      ctx.textAlign = 'center';
      ctx.textBaseline = 'middle';
      prec = scale >= 1 ? 0 : abs(log10(scale));
      s = first;
      while (s <= last) {
        y = fit(s, maximum, minimum) * this.height + this.padTop;
        this.drawHorizLine(ctx, y, LIGHT_GREY);
        ctx.fillText(s.toFixed(prec), this.padLeft / 2, y);
        s += scale;
      }
      ctx.textBaseline = 'alphabetic';
      // Draw bars
      gap = 0.1;
      barWidth = this.width / this.duration;
      offset = this.start;
      i = 0;
      while (i <= this.duration) {
        x = i * barWidth + this.padLeft;
        y = fit(this.frames[offset + i].mx, maximum, minimum) * this.height;
        barHeight = fit(this.frames[offset + i].mn, maximum, minimum) * this.height - y;
        if (offset + i === f) {
          // Draw focus line
          ctx.fillStyle = GREY;
          ctx.fillRect(x, 0, barWidth, this.canvas.height);
          // Store focus values for later use
          fx = x + barWidth / 2;
          fy = y + this.padTop;
          fh = barHeight;
        }
        ctx.fillStyle = DARK_GREY;
        if (this.frames[offset + i].tv > 0) {
          ctx.fillStyle = GREEN;
        } else if (this.frames[offset + i].tv < 0) {
          ctx.fillStyle = RED;
        } else {
          ctx.fillStyle = DARK_GREY;
        }
        ctx.fillRect(x + barWidth * gap / 2, y + this.padTop, barWidth * (1 - gap), barHeight);
        ctx.fillStyle = DARK_GREY;
        i++;
      }
      fframe = this.frames[f];
      // Draw focus info
      ctx.fillStyle = DARK_GREY;
      ctx.font = BOLD;
      ctx.textAlign = 'center';
      // console.log(@start+@focus)
      fdt = (new Date(fframe.ft * 1000)).toDateString();
      ftv = fframe.tv;
      ftrade = (ftv > 0 ? 'Buy: ' : 'Sell: ') + (abs(ftv) / graph.frames[f].wa).toFixed(4) + ' for ' + abs(ftv).toFixed(2) + ' at ' + abs(fframe.wa).toFixed(2);
      ftradeWidth = FONTWIDTH * ftrade.length;
      fresult = fframe.adaval.toFixed(2) + '/' + fframe.eur.toFixed(2) + ' (' + (fframe.adaval + fframe.eur).toFixed(3) + ')';
      fresultWidth = FONTWIDTH * fresult.length;
      ctx.fillRect(fx - ftradeWidth / 2, fy - FONTHEIGHT - 20, ftradeWidth, FONTHEIGHT + 8);
      ctx.fillRect(fx - fresultWidth / 2, fy + fh + 12, fresultWidth, FONTHEIGHT + 8);
      ctx.fillStyle = ftv > 0 ? GREEN : RED;
      ctx.fillText(ftrade, fx, fy - 17);
      ctx.fillStyle = LIGHT_GREY;
      ctx.fillText(fresult, fx, fy + fh + 15 + FONTHEIGHT);
      ctx.fillStyle = DARK_GREY;
      ctx.fillText(fdt, this.canvas.width / 2, this.canvas.height - 15);
      // Draw top and bottom lines
      ctx.lineWidth = 1;
      this.drawHorizLine(ctx, fit(this.bottom, maximum, minimum) * this.height + this.padTop, GREEN);
      this.drawHorizLine(ctx, fit(this.top, maximum, minimum) * this.height + this.padTop, RED);
      this.drawHorizLine(ctx, fit(Math.E ** ((log(this.bottom) + log(this.top)) / 2), maximum, minimum) * this.height + this.padTop, BLUE);
      // Draw summary
      startPrice = parseFloat(this.frames[this.start].wa);
      startAda = this.initial / startPrice;
      endPrice = parseFloat(this.frames[this.start + this.duration].wa);
      endValue = this.frames[this.start + this.duration - 1].adaval + this.frames[this.start + this.duration - 1].eur;
      endAda = endValue / endPrice;
      endResultEur = endValue / this.initial;
      endResultAda = endAda / startAda;
      // console.log(typeof(startPrice))
      summary = 'Start price: ' + startPrice.toFixed(2) + ' Start ADA: ' + startAda.toFixed(2) + ' End price: ' + endPrice.toFixed(2) + ' (' + (endPrice / startPrice).toFixed(2) + ') End ADA:' + endAda.toFixed(2) + ' Result EUR: ' + endResultEur.toFixed(2) + ' Result ADA: ' + endResultAda.toFixed(2);
      ctx.fillStyle = DARK_GREY;
      ctx.fillText(summary, this.canvas.width / 2, 25);
      // FPS
      t = performance.now();
      ctx.font = REGULAR;
      ctx.textAlign = 'left';
      ctx.fillText(round(1000 / (t - timer)) + " FPS", 30, 30);
      timer = t;
      return ctx.restore();
    }

  };

  resizeAct = function() {
    graph.setCanvasSize();
    return redrawScreen();
  };

  wheelAct = function(e) {
    var delta, scale;
    if (e.shiftKey) {
      vp.rot += e.deltaY / 180 / vp.scale ** .5;
    } else {
      delta = e.deltaY * -0.01;
      scale = vp.scale * (1 + delta);
      scale = max(.001, min(1000, scale));
      vp.offx += (vp.width / 2 - e.clientX) * delta * vp.sep ** 2 / vp.unit;
      vp.offy += (vp.height / 2 - e.clientY) * delta * vp.sep ** 2 / vp.unit;
      vp.scale = scale;
      vp.update();
    }
    return redrawScreen();
  };

  mouseDownAct = function(e) {
    console.log("Pressed$ " + e.clientX);
    vp.panx = e.clientX;
    vp.pany = e.clientY;
    vp.panstx = vp.offx;
    vp.pansty = vp.offy;
    return vp.panning = true;
  };

  mouseUpAct = function(e) {
    return vp.panning = false;
  };

  redrawScreen = function() {
    return window.requestAnimationFrame(drawScreen);
  };

  drawScreen = function() {
    return graph.draw();
  };

  // Entry point. Just like that.
  graph = new Graph("doc_graph");

}).call(this);
